services:
  auth:
    container_name: auth-service
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    depends_on:
      db:
        condition: service_healthy
      test_db:
        condition: service_healthy
    ports:
      - "${AUTH_PORT}:8000"
    expose:
      - "8000"
    volumes:
      - ./app:/workdir/app
      # - ../migrations:/migrations
    networks:
      - auth_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
  db:
    image: postgres:17.4-alpine
    container_name: auth-db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TIME_ZONE}
      PGTZ: ${TIME_ZONE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - auth_network
  test_db:
    image: postgres:17.4-alpine
    container_name: auth-test-db
    restart: "no"
    env_file: .env
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
      TZ: ${TIME_ZONE}
      PGTZ: ${TIME_ZONE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${TEST_POSTGRES_PORT}:5432"

volumes:
  postgres_data:

networks:
  auth_network:
    driver: bridge
